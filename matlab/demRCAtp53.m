% DEMRCA Test RCA on TP53 expression data.
%
% SEEALSO : kernCreate, kernCompute, rca, compareROC
%
% Author: Alfredo A. Kalaitzis, 2011

% RCA

clf,clear

addpath(genpath('~/mlprojects/matlab/general/'))
addpath(genpath('~/mlprojects/gp/matlab/'));
addpath(genpath('~/mlprojects/gprege/matlab/'));
gpToolboxes;

load DellaGatta_data_for_RCAdemo.mat

m=3;
N = size(exprs_tp53_RMA,2);
tTrue = [0:20:240 0 20 40 60 120 180 240]';
kern = kernCreate(tTrue, 'rbf');
typDiff = 20; % Typical time difference between samples.
kern.inverseWidth = 1/(typDiff*typDiff); % Characteristic inverse-width.

% First kernel assumes the two profiles are generated by the same process;
% The second, that the two profiles are generated independently.
noise = 1e-4;
K_comb = kernCompute(kern, tTrue) + eye(20)*noise;
% K_ind = blkdiag(K_comb(1:13,1:13),K_comb(14:end,14:end));

% for k=0:20;
% idx_top = sortIndex( ((k*1000)+1) : ((k*1000)+1000) );
% idx_top = sortIndex(1:500);
idx_top = 1:length(exprs_tp53_RMA);
% Concatenate profiles of both conditions.
Y = [exprs_tp53_RMA(:, idx_top);
     exprs_null_RMA(:, idx_top)];
% [X D] = rca(Y', K_comb);

% In this application we apply the dual representation of RCA. This mean
% that want centred data in the sense that the mean is zero across the
% features, not the samples (take off the mean of what is larger). This
% means that in this case the mean is computed across the genes, not the
% timepoints. Here Y is sized Samples x Genes.
% Cy = cov(Y',1);
Y = Y - repmat(mean(Y,2),1, size(Y,2));
% We usually normalise with the number of samples, but in the dual case, we
% normalise with the number of features.
Cy = Y*Y'/size(Y,2);

[S D] = eig(Cy, K_comb);    [D perm] = sort(diag(D),'descend');
X = K_comb * S(:,perm(D>1)) * sqrt(diag(D(D>1)-1)); % Retrieve residual variance basis.

% [X,D] = rca(Y', K_ind);   % Explain away 'independence'.

% subplot(3,2,1), imshow(K_comb), title('Combined RBF-kernels')
% line([0 20.5],[13.5 13.5],'color','w'), line([13.5 13.5],[0 20.5],'color','w')
%subplot(5,2,2), imshow(K_ind), title('Independent RBF-kernels')
%line([0 20.5],[13.5 13.5],'color','w'), line([13.5 13.5],[0 20.5],'color','w')
% subplot(5,2,3:4), bar([D D_]), title('Generalised eigenvalue spectrum'), legend('Combined','Independent'), xlim([0 21])


% Plot evectors, combined kernels.
% subplot(12,5:6);
figure(1), clf
plot(X(:,1:end)),
% ylim([-5 5]),
xlim([0 21]), title('Generalised eigenvectors (combined case)')
% Plot evectors, independent kernels.
%subplot(5,2,7:8);
%plot(X_(:,1:20)), ylim([-5 5]), xlim([0 21])
%title('Generalised eigenvectors (independent case)')

%{
i=1;
subplot(5,2,9:10);
plot([0 27], [0 0], '--', 'color', [.8 .8 .8]), hold on,
y_aux = autosc(Y(:,i));
plot((1:13), y_aux(1:13,i), '.-b', [14:17 20 23 26], y_aux(14:end,i), '.-r'), xlim([0 27]),
Xproj = autosc(X(:,1:m)*pdinv(X(:,1:m)'*X(:,1:m))*X(:,1:m)'*Y(:,i));
plot((1:13), Xproj(1:13), '.-k', [14:17 20 23 26], Xproj(14:end)', '.-k'),
hold off, title('Joint-profile projection onto principal gen''d eigenvectors')
%}

figure(2), clf
Y = [exprs_tp53_RMA; exprs_null_RMA]; % Prepare the whole dataset.
Y = Y - repmat(mean(Y,2),1, N); % Remove mean across features (genes).
for m = 1:size(X,2) 
%     Xproj = X(:,1:m)*X(:,1:m)'*Y;
%     Xproj = X(:,1:m)*pdinv(X(:,1:m)'*X(:,1:m))*X(:,1:m)'*Y;
%     Xproj = X(:,1:m) * S(:,perm(1:m))'*Y;
    Xproj = S(:,perm(D>1))'*Y;
    dists = sum(Xproj.^2,1);
    % [RCArank, RCArank_idx] = sort(dists,'descend');
    hold on
    auc(m)=compareROC(dists, DGatta_labels_byTSNItop100, BATSrankingFilepath);
    %compareROC(dists, DGatta_labels_byTSNI);
end

%{
figure(2), clf, hold on, axis equal,
plot(proj(1,:), proj(2,:), '.','markersize',1 )
colormap('gray'); cmap = flipud(colormap);
dists = dists/max(dists);
for j = 1:size(Y,2)
    text(proj(1,j), proj(2,j), num2str(j), ...
        'color', cmap(ceil(dists(j)*length(cmap)),:), ...
        'fontsize', 1.5+dists(j)*20);
    
end
x1proj = X(:,1)'*Y;
%}

figure(3), clf, plot(1:size(X,2), auc, 'Xr');
